---
import '../styles/global.css'
import { seasons } from '../lib/contentful';
import Logo from '../../public/logo-circle.svg';

interface Props {
	title: string;
	activeNav?: string;
}

const { title, activeNav = 'home' } = Astro.props;

const navItems = [
	{ name: "L'Orchestre", href: "/orchestre", id: "orchestre" },
	{ name: "Direction", href: "/direction", id: "direction" },
	{ name: "Saisons", href: "#", id: "saisons", dropdown: true, links: seasons},
	{ name: "Recrutement", href: "/recrutement", id: "recrutement" },
	{ name: "Media", href: "/media", id: "media" },
	{ name: "Contact", href: "/contact", id: "contact" },
	{ name: "Membres →", href: "https://membres.orchestre-h2o.fr", id: "membres", external: true }
];

// Get current year for footer copyright
const currentYear = new Date().getFullYear();
---

<!doctype html>
<html lang="fr" class="scroll-smooth">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/logo-circle.svg" />
		<meta name="generator" content={Astro.generator} />
		<base href="{import.meta.env.BASE_URL}" />
		<title>{title} | Orchestre H₂O</title>
	</head>
	<body class="flex flex-col min-h-screen bg-white">
		<!-- Navigation -->
		<header class="sticky top-0 z-40 w-full backdrop-blur-sm bg-white/90 shadow-sm">
			<div class="container mx-auto px-4 sm:px-6 lg:px-8">
				<div class="flex justify-between items-center py-4">
					<!-- Logo -->
					<a href="/" class="flex items-center space-x-2">
						<Logo width={50} height={50}  viewBox="0 0 740 740" />
						<span class="text-xl font-semibold text-h2o-dark">Orchestre H₂O</span>
					</a>
					
					<!-- Navigation Items -->
					<nav class="hidden md:flex space-x-6">
						{navItems.map(item => (
							item.external ? (
								<a 
									href={item.href} 
									class={`text-sm font-medium transition-colors ${activeNav === item.id ? 'text-pumpkin-500' : 'text-gray-700 hover:text-pumpkin-500'}`}
									target="_blank"
									rel="noopener noreferrer"
								>
									{item.name}
								</a>
							) : item.dropdown ? (
								<div class="relative group">
									<button 
										class={`text-sm font-medium transition-colors flex items-center ${activeNav === item.id ? 'text-pumpkin-500' : 'text-gray-700 hover:text-pumpkin-500'}`}
									>
										{item.name}
										<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
											<path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
										</svg>
									</button>
									<div class="absolute left-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-300">
										<div class="py-1">
											{item.links.map(link => (
												<a 
													href={`/saison/${link}`} 
													class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
												>
													Saison {link}
												</a>
											))}
										</div>
									</div>
								</div>
							) : (
								<a 
									href={item.href} 
									class={`text-sm font-medium transition-colors ${activeNav === item.id ? 'text-pumpkin-500' : 'text-gray-700 hover:text-pumpkin-500'}`}
								>
									{item.name}
								</a>
							)
						))}
					</nav>
					
					<!-- Mobile menu button -->
					<button 
						id="mobile-menu-button" 
						class="md:hidden flex items-center text-gray-700"
						aria-label="Menu principal"
					>
						<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" />
						</svg>
					</button>
				</div>
			</div>
			
			<!-- Mobile menu -->
			<div id="mobile-menu" class="hidden md:hidden bg-white border-t border-gray-200">
				<div class="container mx-auto px-4 py-2 space-y-1">
					{navItems.map(item => (
						item.external ? (
							<a 
								href={item.href} 
								class={`block py-2 px-3 rounded-md ${activeNav === item.id ? 'bg-gray-100 text-pumpkin-500' : 'text-gray-700 hover:bg-gray-50'}`}
								target="_blank"
								rel="noopener noreferrer"
							>
								{item.name}
							</a>
						) : item.dropdown ? (
							<>
								<button 
									class={`mobile-dropdown-toggle flex justify-between items-center w-full py-2 px-3 rounded-md ${activeNav === item.id ? 'bg-gray-100 text-pumpkin-500' : 'text-gray-700 hover:bg-gray-50'}`}
								>
									{item.name}
									<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 transition-transform duration-300" viewBox="0 0 20 20" fill="currentColor">
										<path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
									</svg>
								</button>
								<div class="mobile-dropdown-menu pl-4 ml-3 border-l border-gray-200 py-2 space-y-1 hidden">
									{item.links.map(link => (
												<a 
													href={`/saison/${link}`} 
													class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
												>
													Saison {link}
												</a>
											))}
								</div>
							</>
						) : (
							<a 
								href={item.href} 
								class={`block py-2 px-3 rounded-md ${activeNav === item.id ? 'bg-gray-100 text-pumpkin-500' : 'text-gray-700 hover:bg-gray-50'}`}
							>
								{item.name}
							</a>
						)
					))}
				</div>
			</div>
		</header>

		<!-- Main content -->
		<main class="flex-grow">
			<slot />
		</main>

		<!-- Footer -->
		<footer class="bg-gradient-to-br from-pumpkin-700 to-pumpkin-400 text-white">
			<div class="container mx-auto px-4 py-8 md:py-12">
				<div class="grid grid-cols-1 md:grid-cols-3 gap-8">
					<div>
						<div class="flex items-center space-x-2 mb-4">
							<img src="/logo-circle.svg" alt="H₂O Orchestra Logo" class="h-8 w-8" />
							<span class="text-lg font-semibold">Orchestre H₂O</span>
						</div>
						<p class="text-gray-200 text-sm">L'Orchestre H₂O est une formation d'harmonie amateur Toulousaine fondée en 2011.</p>
					</div>
					
					<div>
						<h3 class="font-medium mb-4">Contact</h3>
						<ul class="text-gray-200 text-sm space-y-2">
							<li>Email: contact@orchestre-h2o.fr</li>
							<li>Téléphone: 06 62 74 07 28</li>
							<li>Adresse: 11 rue des Tamaris</li>
							<li>31400 Toulouse</li>
						</ul>
					</div>
					
					<div>
						<h3 class="font-medium mb-4">Suivez-nous</h3>
						<div class="flex space-x-4">
							<a href="https://www.facebook.com/OrchestreH2O" class="text-gray-200 hover:text-white transition-colors" aria-label="Facebook">
								<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
									<path d="M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v3.385z"/>
								</svg>
							</a>							
						</div>
					</div>
				</div>
				
				<div class="mt-8 border-t border-pumpkin-700 pt-8 text-center text-gray-200 text-sm">
					<p>&copy; {currentYear} Orchestre H₂O. Tous droits réservés.</p>
				</div>
			</div>
		</footer>

		<script>
			// Mobile menu toggle
			document.addEventListener('DOMContentLoaded', () => {
				const mobileMenuButton = document.getElementById('mobile-menu-button');
				const mobileMenu = document.getElementById('mobile-menu');
				
				if (mobileMenuButton && mobileMenu) {
					mobileMenuButton.addEventListener('click', () => {
						mobileMenu.classList.toggle('hidden');
					});
				}

				// Mobile dropdown toggles
				const mobileDropdownToggles = document.querySelectorAll('.mobile-dropdown-toggle');
				
				// Initialize dropdown menus
				document.querySelectorAll('.mobile-dropdown-menu').forEach(menu => {
					const menuElement = menu as HTMLElement;
					menuElement.style.maxHeight = '0px';
				});
				
				mobileDropdownToggles.forEach(toggle => {
					toggle.addEventListener('click', (e) => {
						e.preventDefault();
						// Find the next sibling which is the dropdown menu
						const dropdownMenu = toggle.nextElementSibling;
						if (dropdownMenu && dropdownMenu.classList.contains('mobile-dropdown-menu')) {
							// Toggle visibility
							dropdownMenu.classList.toggle('hidden');
							
							// Animation for height - type assertion for TypeScript
							const menuElement = dropdownMenu as HTMLElement;
							if (!dropdownMenu.classList.contains('hidden')) {
								menuElement.style.maxHeight = menuElement.scrollHeight + 'px';
							} else {
								menuElement.style.maxHeight = '0px';
							}
							
							// Rotate the dropdown arrow
							const arrow = toggle.querySelector('svg');
							if (arrow) {
								arrow.classList.toggle('rotate-180');
							}
						}
					});
				});
			});
		</script>
	</body>
</html>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
	}
	
	.mobile-dropdown-menu {
		transition: max-height 0.3s ease-in-out;
		max-height: 0;
		overflow: hidden;
	}
	
	.mobile-dropdown-menu:not(.hidden) {
		max-height: 500px; /* This will be overridden by JavaScript */
	}
</style>
